Class {
	#name : #PyramidProjectModel,
	#superclass : #Object,
	#traits : 'TPyramidProjectModel',
	#classTraits : 'TPyramidProjectModel classTrait',
	#instVars : [
		'roots',
		'selection'
	],
	#category : #'Pyramid-models'
}

{ #category : #accessing }
PyramidProjectModel >> allElements [

	^ PyramidElementsManipulationHelper flattenChildrenOfCollection:
		               self roots.
]

{ #category : #accessing }
PyramidProjectModel >> initialize [

	selection := PyramidCollectionWithCallbacks new.
	roots := PyramidSortedCollectionWithCallbacks new sortFunction: PyramidElevationSortFunction new; yourself.

	selection subscribe: self withCallback: [ self informSelectionChanged ].
	roots subscribe: self withCallback: [ self informRootsChanged ]
]

{ #category : #accessing }
PyramidProjectModel >> roots [
^ roots
]

{ #category : #selection }
PyramidProjectModel >> selection [

	^ selection
]

{ #category : #selection }
PyramidProjectModel >> setSelection: aBlElementCollection [
	"Replace current selection by another one"
	
	self selection replaceAll: aBlElementCollection
]

{ #category : #selection }
PyramidProjectModel >> updateSelection [
	"Update the selection list regarding existing elements"
	
	| toBeRemovedFromSelectionElements |
	"Select not attached to scene or without parents elements (this is the status after a deletion)"
	toBeRemovedFromSelectionElements := self selection collection select:[ :e | e hasParent not or:[ e isAttachedToSceneGraph ] ].
	
	self selection removeAll: toBeRemovedFromSelectionElements.
	
	
]
